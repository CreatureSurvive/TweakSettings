//
//  TS-Prefix.pch
//  TweakSettings
//
//  Created by Dana Buehre on 5/19/21.
//

#ifdef __OBJC__

#import <Foundation/Foundation.h>
#import <os/log.h>

#endif

#ifndef TS_Prefix_pch
#define TS_Prefix_pch

#define Log(format, ...) os_log(OS_LOG_DEFAULT, ("(com.creaturecoding.tweaksettings) %s [LOG Line %d] " format), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);
#define Info(format, ...) os_log_info(OS_LOG_DEFAULT, ("(com.creaturecoding.tweaksettings) %s [INFO Line %d] " format), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);
#define Error(format, ...) os_log_error(OS_LOG_DEFAULT, ("(com.creaturecoding.tweaksettings) %s [ERROR Line %d] " format), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);
#define Fault(format, ...) os_log_fault(OS_LOG_DEFAULT, ("(com.creaturecoding.tweaksettings) %s [FAULT Line %d] " format), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);
#define LogWithType(type, format, ...) os_log_with_type(OS_LOG_DEFAULT, type, ("(com.creaturecoding.tweaksettings) %s [Line %d] " format), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);

NS_INLINE __unused void MAIN_QUEUE(void (^block)(void)) {
    [NSThread isMainThread] ? block() : dispatch_async(dispatch_get_main_queue(), ^{
        @autoreleasepool {block();}
    });
}

NS_INLINE __unused void MAIN_QUEUE_UNSAFE(void (^block)(void)) {
    dispatch_async(dispatch_get_main_queue(), ^{
        @autoreleasepool {block();}
    });
}

NS_INLINE __unused void HIGH_QUEUE(void (^block)(void)) {
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{
        @autoreleasepool {block();}
    });
}

NS_INLINE __unused NSObject *OBJECT_WITH_PLIST_OPTIONS(NSString *path, NSPropertyListReadOptions options) {
    NSError *err1, *err2;
    NSData *plistData = [NSData dataWithContentsOfFile:path options:(NSDataReadingOptions) 0 error:&err1];
    if (plistData && !err1) {
        NSObject *object = [NSPropertyListSerialization propertyListWithData:plistData options:options format:NULL error:&err2];
        if (object && !err2) {
            return object;
        }
        Error("(failed to read property-list file): %@", err2.localizedDescription);
        return nil;
    }
    Error("(failed to read property-list file): %@", err1.localizedDescription);
    return nil;
}

NS_INLINE __unused NSDictionary *DICTIONARY_WITH_PLIST_OPTIONS(NSString *path, NSPropertyListReadOptions options) {
    NSObject *object = OBJECT_WITH_PLIST_OPTIONS(path, options);
    if (object && [object isKindOfClass:NSDictionary.class]) {
        return (NSDictionary *) object;
    }
    Error("(property-list file at %@ is not a dictionary)", path);
    return nil;
}

NS_INLINE __unused NSDictionary *DICTIONARY_WITH_PLIST(NSString *path) {
    return DICTIONARY_WITH_PLIST_OPTIONS(path, NSPropertyListImmutable);
}

NS_INLINE __unused NSArray *ARRAY_WITH_PLIST_OPTIONS(NSString *path, NSPropertyListReadOptions options) {
    NSObject *object = OBJECT_WITH_PLIST_OPTIONS(path, options);
    if (object && [object isKindOfClass:NSArray.class]) {
        return (NSArray *) object;
    }
    Error("(property-list file at %@ is not an array)", path);
    return nil;
}

NS_INLINE __unused NSArray *ARRAY_WITH_PLIST(NSString *path) {
    return ARRAY_WITH_PLIST_OPTIONS(path, NSPropertyListImmutable);
}

#endif /* TS_Prefix_pch */
